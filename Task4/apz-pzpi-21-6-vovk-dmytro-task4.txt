2 ІНЖЕНЕРНІ РІШЕННЯ
2.1 Структура та технології проєкту

Для розробки вебклієнта, було обрано Angilar, через відносну простоту створення та наявність досвіду у використанні. Також для швидкого створення дизайну, було обрано використання Bootstrap 5.
Проєкт вебклієнта є одношаровим монолітом. 
Всі можливі сценарії використання користувацького інтерфейсу, зображено на UML діаграмі прецедентів (див. рис. 2.1).



Рисунок 2.1 - UML діаграма прецедентів користувача

2.2 Локалізація

Для реалізації локалізації, було використано інструменти бібліотеки “@ngx-translate”. Вебзастосунок підтримує дві мови: українську та англійську. За замовчуванням обрана англійська мова. Вибір мови користувача, зберігається локально у браузері користувача. 
Дата та час, інтерпретуються з формату UTC у локальний часовий пояс користувача.

2.3 Механізм роботи з таблицями

Для відображення табличних даних, було створено компонент “app-table” (див. розділ А.1 у додатку A). Цей компонент стандартизує відображення та пошук даних. Він використовується для відображення переліку користувачів, роботів, груп і т.д.

2.4 Сервіс повідомлень

Для нотифікації користувача про якісь події у системі, було розроблено сервіс повідомлень “AlertsService” (див. розділ А.2 у додатку A), який представлений в одному екземплярі, через використання Depenensy Injanction. Повідомлення, які публікуються цим сервісом, відображаються компонентом “app-notifications”.
Повідомлення має такі властивості як: 
- ідентифікатор - додає унікальність кожному повідомленню та можливість працювати із кожним повідомленням окремо;
- дата створення;
- дата оновлення;
- повідомлення - контент повідомлення, може бути у форматі HTML;
- індекс - впливає на порядок відображення повідомлень;
- тип - впливає на колір повідомлення;
- тривалість життя - час, через який повідомлення автоматично закриється. Якщо вказано значення менше ніж 0, то повідомлення автоматично не видалятиметься;
- дані - може містити додаткову інформацію для контексту повідомлення.
Також, повідомлення має 2 обробники подій: onclose та onclick.

2.5 Зміна інтерфейсу залежно від прав користувача

Користувачі із різним рівнем доступу мають різні можливості у використанні системи. Це відображається у доступі до деяких шляхів та зніми інтерфейсу.
Для перевірки рівня доступу було створено “PermissionGuard” (див. розділ А.3 у додатку A), який дозволяє перевіряти дозволи користувача, наступним чином (див. розділ А.4 у додатку A).

2.6 Взаємодія з API

Для взаємодії з API, було розроблено базовий клас, у якому реалізована функція обробник помилок та додавання стандартних заголовків до запиту, як то заголовок авторизації. Логіка функції наступна: якщо код відповіді дорівнює 401, то переправити користувача на сторінку авторизації (див. розділ А.5 у додатку A).
 
2.7 Робота з мапою

Для роботи з мапою, було використано можливості бібліотеки “Leaflet” і створено компонент під назвою “app-map”. Для обробки повідомлень від SingalR, був створений обробник (див. розділ А.6 у додатку A) із  використанням шаблону проєктування “Command”
